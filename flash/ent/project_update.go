// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"flash/ent/predicate"
	"flash/ent/project"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ProjectUpdate is the builder for updating Project entities.
type ProjectUpdate struct {
	config
	hooks    []Hook
	mutation *ProjectMutation
}

// Where appends a list predicates to the ProjectUpdate builder.
func (_u *ProjectUpdate) Where(ps ...predicate.Project) *ProjectUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetName sets the "name" field.
func (_u *ProjectUpdate) SetName(v string) *ProjectUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *ProjectUpdate) SetNillableName(v *string) *ProjectUpdate {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetDescription sets the "description" field.
func (_u *ProjectUpdate) SetDescription(v string) *ProjectUpdate {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *ProjectUpdate) SetNillableDescription(v *string) *ProjectUpdate {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *ProjectUpdate) ClearDescription() *ProjectUpdate {
	_u.mutation.ClearDescription()
	return _u
}

// SetSlug sets the "slug" field.
func (_u *ProjectUpdate) SetSlug(v string) *ProjectUpdate {
	_u.mutation.SetSlug(v)
	return _u
}

// SetNillableSlug sets the "slug" field if the given value is not nil.
func (_u *ProjectUpdate) SetNillableSlug(v *string) *ProjectUpdate {
	if v != nil {
		_u.SetSlug(*v)
	}
	return _u
}

// SetSubDomain sets the "sub_domain" field.
func (_u *ProjectUpdate) SetSubDomain(v string) *ProjectUpdate {
	_u.mutation.SetSubDomain(v)
	return _u
}

// SetNillableSubDomain sets the "sub_domain" field if the given value is not nil.
func (_u *ProjectUpdate) SetNillableSubDomain(v *string) *ProjectUpdate {
	if v != nil {
		_u.SetSubDomain(*v)
	}
	return _u
}

// ClearSubDomain clears the value of the "sub_domain" field.
func (_u *ProjectUpdate) ClearSubDomain() *ProjectUpdate {
	_u.mutation.ClearSubDomain()
	return _u
}

// SetTheme sets the "theme" field.
func (_u *ProjectUpdate) SetTheme(v string) *ProjectUpdate {
	_u.mutation.SetTheme(v)
	return _u
}

// SetNillableTheme sets the "theme" field if the given value is not nil.
func (_u *ProjectUpdate) SetNillableTheme(v *string) *ProjectUpdate {
	if v != nil {
		_u.SetTheme(*v)
	}
	return _u
}

// SetLayout sets the "layout" field.
func (_u *ProjectUpdate) SetLayout(v string) *ProjectUpdate {
	_u.mutation.SetLayout(v)
	return _u
}

// SetNillableLayout sets the "layout" field if the given value is not nil.
func (_u *ProjectUpdate) SetNillableLayout(v *string) *ProjectUpdate {
	if v != nil {
		_u.SetLayout(*v)
	}
	return _u
}

// SetType sets the "type" field.
func (_u *ProjectUpdate) SetType(v project.Type) *ProjectUpdate {
	_u.mutation.SetType(v)
	return _u
}

// SetNillableType sets the "type" field if the given value is not nil.
func (_u *ProjectUpdate) SetNillableType(v *project.Type) *ProjectUpdate {
	if v != nil {
		_u.SetType(*v)
	}
	return _u
}

// SetCreatedAt sets the "created_at" field.
func (_u *ProjectUpdate) SetCreatedAt(v time.Time) *ProjectUpdate {
	_u.mutation.SetCreatedAt(v)
	return _u
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_u *ProjectUpdate) SetNillableCreatedAt(v *time.Time) *ProjectUpdate {
	if v != nil {
		_u.SetCreatedAt(*v)
	}
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *ProjectUpdate) SetUpdatedAt(v time.Time) *ProjectUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// Mutation returns the ProjectMutation object of the builder.
func (_u *ProjectUpdate) Mutation() *ProjectMutation {
	return _u.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *ProjectUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *ProjectUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *ProjectUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *ProjectUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *ProjectUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := project.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *ProjectUpdate) check() error {
	if v, ok := _u.mutation.Name(); ok {
		if err := project.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Project.name": %w`, err)}
		}
	}
	if v, ok := _u.mutation.GetType(); ok {
		if err := project.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Project.type": %w`, err)}
		}
	}
	return nil
}

func (_u *ProjectUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(project.Table, project.Columns, sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(project.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(project.FieldDescription, field.TypeString, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(project.FieldDescription, field.TypeString)
	}
	if value, ok := _u.mutation.Slug(); ok {
		_spec.SetField(project.FieldSlug, field.TypeString, value)
	}
	if value, ok := _u.mutation.SubDomain(); ok {
		_spec.SetField(project.FieldSubDomain, field.TypeString, value)
	}
	if _u.mutation.SubDomainCleared() {
		_spec.ClearField(project.FieldSubDomain, field.TypeString)
	}
	if value, ok := _u.mutation.Theme(); ok {
		_spec.SetField(project.FieldTheme, field.TypeString, value)
	}
	if value, ok := _u.mutation.Layout(); ok {
		_spec.SetField(project.FieldLayout, field.TypeString, value)
	}
	if value, ok := _u.mutation.GetType(); ok {
		_spec.SetField(project.FieldType, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.CreatedAt(); ok {
		_spec.SetField(project.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(project.FieldUpdatedAt, field.TypeTime, value)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{project.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// ProjectUpdateOne is the builder for updating a single Project entity.
type ProjectUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProjectMutation
}

// SetName sets the "name" field.
func (_u *ProjectUpdateOne) SetName(v string) *ProjectUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *ProjectUpdateOne) SetNillableName(v *string) *ProjectUpdateOne {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetDescription sets the "description" field.
func (_u *ProjectUpdateOne) SetDescription(v string) *ProjectUpdateOne {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *ProjectUpdateOne) SetNillableDescription(v *string) *ProjectUpdateOne {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *ProjectUpdateOne) ClearDescription() *ProjectUpdateOne {
	_u.mutation.ClearDescription()
	return _u
}

// SetSlug sets the "slug" field.
func (_u *ProjectUpdateOne) SetSlug(v string) *ProjectUpdateOne {
	_u.mutation.SetSlug(v)
	return _u
}

// SetNillableSlug sets the "slug" field if the given value is not nil.
func (_u *ProjectUpdateOne) SetNillableSlug(v *string) *ProjectUpdateOne {
	if v != nil {
		_u.SetSlug(*v)
	}
	return _u
}

// SetSubDomain sets the "sub_domain" field.
func (_u *ProjectUpdateOne) SetSubDomain(v string) *ProjectUpdateOne {
	_u.mutation.SetSubDomain(v)
	return _u
}

// SetNillableSubDomain sets the "sub_domain" field if the given value is not nil.
func (_u *ProjectUpdateOne) SetNillableSubDomain(v *string) *ProjectUpdateOne {
	if v != nil {
		_u.SetSubDomain(*v)
	}
	return _u
}

// ClearSubDomain clears the value of the "sub_domain" field.
func (_u *ProjectUpdateOne) ClearSubDomain() *ProjectUpdateOne {
	_u.mutation.ClearSubDomain()
	return _u
}

// SetTheme sets the "theme" field.
func (_u *ProjectUpdateOne) SetTheme(v string) *ProjectUpdateOne {
	_u.mutation.SetTheme(v)
	return _u
}

// SetNillableTheme sets the "theme" field if the given value is not nil.
func (_u *ProjectUpdateOne) SetNillableTheme(v *string) *ProjectUpdateOne {
	if v != nil {
		_u.SetTheme(*v)
	}
	return _u
}

// SetLayout sets the "layout" field.
func (_u *ProjectUpdateOne) SetLayout(v string) *ProjectUpdateOne {
	_u.mutation.SetLayout(v)
	return _u
}

// SetNillableLayout sets the "layout" field if the given value is not nil.
func (_u *ProjectUpdateOne) SetNillableLayout(v *string) *ProjectUpdateOne {
	if v != nil {
		_u.SetLayout(*v)
	}
	return _u
}

// SetType sets the "type" field.
func (_u *ProjectUpdateOne) SetType(v project.Type) *ProjectUpdateOne {
	_u.mutation.SetType(v)
	return _u
}

// SetNillableType sets the "type" field if the given value is not nil.
func (_u *ProjectUpdateOne) SetNillableType(v *project.Type) *ProjectUpdateOne {
	if v != nil {
		_u.SetType(*v)
	}
	return _u
}

// SetCreatedAt sets the "created_at" field.
func (_u *ProjectUpdateOne) SetCreatedAt(v time.Time) *ProjectUpdateOne {
	_u.mutation.SetCreatedAt(v)
	return _u
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_u *ProjectUpdateOne) SetNillableCreatedAt(v *time.Time) *ProjectUpdateOne {
	if v != nil {
		_u.SetCreatedAt(*v)
	}
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *ProjectUpdateOne) SetUpdatedAt(v time.Time) *ProjectUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// Mutation returns the ProjectMutation object of the builder.
func (_u *ProjectUpdateOne) Mutation() *ProjectMutation {
	return _u.mutation
}

// Where appends a list predicates to the ProjectUpdate builder.
func (_u *ProjectUpdateOne) Where(ps ...predicate.Project) *ProjectUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *ProjectUpdateOne) Select(field string, fields ...string) *ProjectUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Project entity.
func (_u *ProjectUpdateOne) Save(ctx context.Context) (*Project, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *ProjectUpdateOne) SaveX(ctx context.Context) *Project {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *ProjectUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *ProjectUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *ProjectUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := project.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *ProjectUpdateOne) check() error {
	if v, ok := _u.mutation.Name(); ok {
		if err := project.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Project.name": %w`, err)}
		}
	}
	if v, ok := _u.mutation.GetType(); ok {
		if err := project.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Project.type": %w`, err)}
		}
	}
	return nil
}

func (_u *ProjectUpdateOne) sqlSave(ctx context.Context) (_node *Project, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(project.Table, project.Columns, sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Project.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, project.FieldID)
		for _, f := range fields {
			if !project.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != project.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(project.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(project.FieldDescription, field.TypeString, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(project.FieldDescription, field.TypeString)
	}
	if value, ok := _u.mutation.Slug(); ok {
		_spec.SetField(project.FieldSlug, field.TypeString, value)
	}
	if value, ok := _u.mutation.SubDomain(); ok {
		_spec.SetField(project.FieldSubDomain, field.TypeString, value)
	}
	if _u.mutation.SubDomainCleared() {
		_spec.ClearField(project.FieldSubDomain, field.TypeString)
	}
	if value, ok := _u.mutation.Theme(); ok {
		_spec.SetField(project.FieldTheme, field.TypeString, value)
	}
	if value, ok := _u.mutation.Layout(); ok {
		_spec.SetField(project.FieldLayout, field.TypeString, value)
	}
	if value, ok := _u.mutation.GetType(); ok {
		_spec.SetField(project.FieldType, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.CreatedAt(); ok {
		_spec.SetField(project.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(project.FieldUpdatedAt, field.TypeTime, value)
	}
	_node = &Project{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{project.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
