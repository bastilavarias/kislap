// Code generated by ent, DO NOT EDIT.

package project

import (
	"flash/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldName, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldDescription, v))
}

// Slug applies equality check predicate on the "slug" field. It's identical to SlugEQ.
func Slug(v string) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldSlug, v))
}

// SubDomain applies equality check predicate on the "sub_domain" field. It's identical to SubDomainEQ.
func SubDomain(v string) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldSubDomain, v))
}

// Theme applies equality check predicate on the "theme" field. It's identical to ThemeEQ.
func Theme(v string) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldTheme, v))
}

// Layout applies equality check predicate on the "layout" field. It's identical to LayoutEQ.
func Layout(v string) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldLayout, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldUpdatedAt, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Project {
	return predicate.Project(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Project {
	return predicate.Project(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Project {
	return predicate.Project(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Project {
	return predicate.Project(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Project {
	return predicate.Project(sql.FieldContainsFold(FieldName, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Project {
	return predicate.Project(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Project {
	return predicate.Project(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Project {
	return predicate.Project(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.Project {
	return predicate.Project(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.Project {
	return predicate.Project(sql.FieldNotNull(FieldDescription))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Project {
	return predicate.Project(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Project {
	return predicate.Project(sql.FieldContainsFold(FieldDescription, v))
}

// SlugEQ applies the EQ predicate on the "slug" field.
func SlugEQ(v string) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldSlug, v))
}

// SlugNEQ applies the NEQ predicate on the "slug" field.
func SlugNEQ(v string) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldSlug, v))
}

// SlugIn applies the In predicate on the "slug" field.
func SlugIn(vs ...string) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldSlug, vs...))
}

// SlugNotIn applies the NotIn predicate on the "slug" field.
func SlugNotIn(vs ...string) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldSlug, vs...))
}

// SlugGT applies the GT predicate on the "slug" field.
func SlugGT(v string) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldSlug, v))
}

// SlugGTE applies the GTE predicate on the "slug" field.
func SlugGTE(v string) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldSlug, v))
}

// SlugLT applies the LT predicate on the "slug" field.
func SlugLT(v string) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldSlug, v))
}

// SlugLTE applies the LTE predicate on the "slug" field.
func SlugLTE(v string) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldSlug, v))
}

// SlugContains applies the Contains predicate on the "slug" field.
func SlugContains(v string) predicate.Project {
	return predicate.Project(sql.FieldContains(FieldSlug, v))
}

// SlugHasPrefix applies the HasPrefix predicate on the "slug" field.
func SlugHasPrefix(v string) predicate.Project {
	return predicate.Project(sql.FieldHasPrefix(FieldSlug, v))
}

// SlugHasSuffix applies the HasSuffix predicate on the "slug" field.
func SlugHasSuffix(v string) predicate.Project {
	return predicate.Project(sql.FieldHasSuffix(FieldSlug, v))
}

// SlugEqualFold applies the EqualFold predicate on the "slug" field.
func SlugEqualFold(v string) predicate.Project {
	return predicate.Project(sql.FieldEqualFold(FieldSlug, v))
}

// SlugContainsFold applies the ContainsFold predicate on the "slug" field.
func SlugContainsFold(v string) predicate.Project {
	return predicate.Project(sql.FieldContainsFold(FieldSlug, v))
}

// SubDomainEQ applies the EQ predicate on the "sub_domain" field.
func SubDomainEQ(v string) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldSubDomain, v))
}

// SubDomainNEQ applies the NEQ predicate on the "sub_domain" field.
func SubDomainNEQ(v string) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldSubDomain, v))
}

// SubDomainIn applies the In predicate on the "sub_domain" field.
func SubDomainIn(vs ...string) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldSubDomain, vs...))
}

// SubDomainNotIn applies the NotIn predicate on the "sub_domain" field.
func SubDomainNotIn(vs ...string) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldSubDomain, vs...))
}

// SubDomainGT applies the GT predicate on the "sub_domain" field.
func SubDomainGT(v string) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldSubDomain, v))
}

// SubDomainGTE applies the GTE predicate on the "sub_domain" field.
func SubDomainGTE(v string) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldSubDomain, v))
}

// SubDomainLT applies the LT predicate on the "sub_domain" field.
func SubDomainLT(v string) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldSubDomain, v))
}

// SubDomainLTE applies the LTE predicate on the "sub_domain" field.
func SubDomainLTE(v string) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldSubDomain, v))
}

// SubDomainContains applies the Contains predicate on the "sub_domain" field.
func SubDomainContains(v string) predicate.Project {
	return predicate.Project(sql.FieldContains(FieldSubDomain, v))
}

// SubDomainHasPrefix applies the HasPrefix predicate on the "sub_domain" field.
func SubDomainHasPrefix(v string) predicate.Project {
	return predicate.Project(sql.FieldHasPrefix(FieldSubDomain, v))
}

// SubDomainHasSuffix applies the HasSuffix predicate on the "sub_domain" field.
func SubDomainHasSuffix(v string) predicate.Project {
	return predicate.Project(sql.FieldHasSuffix(FieldSubDomain, v))
}

// SubDomainIsNil applies the IsNil predicate on the "sub_domain" field.
func SubDomainIsNil() predicate.Project {
	return predicate.Project(sql.FieldIsNull(FieldSubDomain))
}

// SubDomainNotNil applies the NotNil predicate on the "sub_domain" field.
func SubDomainNotNil() predicate.Project {
	return predicate.Project(sql.FieldNotNull(FieldSubDomain))
}

// SubDomainEqualFold applies the EqualFold predicate on the "sub_domain" field.
func SubDomainEqualFold(v string) predicate.Project {
	return predicate.Project(sql.FieldEqualFold(FieldSubDomain, v))
}

// SubDomainContainsFold applies the ContainsFold predicate on the "sub_domain" field.
func SubDomainContainsFold(v string) predicate.Project {
	return predicate.Project(sql.FieldContainsFold(FieldSubDomain, v))
}

// ThemeEQ applies the EQ predicate on the "theme" field.
func ThemeEQ(v string) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldTheme, v))
}

// ThemeNEQ applies the NEQ predicate on the "theme" field.
func ThemeNEQ(v string) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldTheme, v))
}

// ThemeIn applies the In predicate on the "theme" field.
func ThemeIn(vs ...string) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldTheme, vs...))
}

// ThemeNotIn applies the NotIn predicate on the "theme" field.
func ThemeNotIn(vs ...string) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldTheme, vs...))
}

// ThemeGT applies the GT predicate on the "theme" field.
func ThemeGT(v string) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldTheme, v))
}

// ThemeGTE applies the GTE predicate on the "theme" field.
func ThemeGTE(v string) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldTheme, v))
}

// ThemeLT applies the LT predicate on the "theme" field.
func ThemeLT(v string) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldTheme, v))
}

// ThemeLTE applies the LTE predicate on the "theme" field.
func ThemeLTE(v string) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldTheme, v))
}

// ThemeContains applies the Contains predicate on the "theme" field.
func ThemeContains(v string) predicate.Project {
	return predicate.Project(sql.FieldContains(FieldTheme, v))
}

// ThemeHasPrefix applies the HasPrefix predicate on the "theme" field.
func ThemeHasPrefix(v string) predicate.Project {
	return predicate.Project(sql.FieldHasPrefix(FieldTheme, v))
}

// ThemeHasSuffix applies the HasSuffix predicate on the "theme" field.
func ThemeHasSuffix(v string) predicate.Project {
	return predicate.Project(sql.FieldHasSuffix(FieldTheme, v))
}

// ThemeEqualFold applies the EqualFold predicate on the "theme" field.
func ThemeEqualFold(v string) predicate.Project {
	return predicate.Project(sql.FieldEqualFold(FieldTheme, v))
}

// ThemeContainsFold applies the ContainsFold predicate on the "theme" field.
func ThemeContainsFold(v string) predicate.Project {
	return predicate.Project(sql.FieldContainsFold(FieldTheme, v))
}

// LayoutEQ applies the EQ predicate on the "layout" field.
func LayoutEQ(v string) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldLayout, v))
}

// LayoutNEQ applies the NEQ predicate on the "layout" field.
func LayoutNEQ(v string) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldLayout, v))
}

// LayoutIn applies the In predicate on the "layout" field.
func LayoutIn(vs ...string) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldLayout, vs...))
}

// LayoutNotIn applies the NotIn predicate on the "layout" field.
func LayoutNotIn(vs ...string) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldLayout, vs...))
}

// LayoutGT applies the GT predicate on the "layout" field.
func LayoutGT(v string) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldLayout, v))
}

// LayoutGTE applies the GTE predicate on the "layout" field.
func LayoutGTE(v string) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldLayout, v))
}

// LayoutLT applies the LT predicate on the "layout" field.
func LayoutLT(v string) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldLayout, v))
}

// LayoutLTE applies the LTE predicate on the "layout" field.
func LayoutLTE(v string) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldLayout, v))
}

// LayoutContains applies the Contains predicate on the "layout" field.
func LayoutContains(v string) predicate.Project {
	return predicate.Project(sql.FieldContains(FieldLayout, v))
}

// LayoutHasPrefix applies the HasPrefix predicate on the "layout" field.
func LayoutHasPrefix(v string) predicate.Project {
	return predicate.Project(sql.FieldHasPrefix(FieldLayout, v))
}

// LayoutHasSuffix applies the HasSuffix predicate on the "layout" field.
func LayoutHasSuffix(v string) predicate.Project {
	return predicate.Project(sql.FieldHasSuffix(FieldLayout, v))
}

// LayoutEqualFold applies the EqualFold predicate on the "layout" field.
func LayoutEqualFold(v string) predicate.Project {
	return predicate.Project(sql.FieldEqualFold(FieldLayout, v))
}

// LayoutContainsFold applies the ContainsFold predicate on the "layout" field.
func LayoutContainsFold(v string) predicate.Project {
	return predicate.Project(sql.FieldContainsFold(FieldLayout, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v Type) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v Type) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...Type) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...Type) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldType, vs...))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldUpdatedAt, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Project) predicate.Project {
	return predicate.Project(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Project) predicate.Project {
	return predicate.Project(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Project) predicate.Project {
	return predicate.Project(sql.NotPredicates(p))
}
